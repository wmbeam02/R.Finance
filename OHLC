# Here's a function I wrote for taking raw tick data (LAST) and making a data frame of OHLC rows for whatever tick value I want

OHLC=function( tick.wanted=1500, raw.df, tick.df, ... ){  
  for (i in seq( tick.df[ 1, 7 ] : (nrow( raw.df )))) {
    # First entry into new row & size is checked to be less than tick & there's enough data remaining in raw to not leave a partial row after
    if (( tick.df[ 1, 9 ] == 1 ) && ( tick.df[ 1, 6 ] + raw.df[ tick.df[ 1, 7 ], 3 ] < tick.wanted ) && (( tick.df[ 1, 6 ] + sum ( raw.df[ tick.df[ 1, 7 ] : nrow( raw.df ), 3 ] )) > tick.wanted )) {
        tick.df[ tick.df[ 1, 8 ], 1 ] = raw.df[ tick.df[ 1, 7 ], 1 ]
        tick.df[ tick.df[ 1, 8 ], 2 ] = raw.df[ tick.df[ 1, 7 ], 2 ]
        tick.df[ tick.df[ 1, 8 ], 3 ] = raw.df[ tick.df[ 1, 7 ], 2 ]
        tick.df[ tick.df[ 1, 8 ], 4 ] = raw.df[ tick.df[ 1, 7 ], 2 ]
        raw.df[ tick.df[ 1, 7 ], 4 ]= 1
        # Incrementing counts
        tick.df[ 1, 6 ] = ( tick.df[ 1, 6 ] + raw.df[ tick.df[ 1, 7 ], 3 ] )
        tick.df[ 1, 7 ] = tick.df[ 1, 7 ] + 1
        tick.df[ 1, 9 ] = tick.df[ 1, 9 ] + 1
       # Second new entry into tick.df and size will be equal to the tick wanted 
      }else if (( tick.df[ 1, 9 ] == 1 ) && ( tick.df[ 1, 6 ] + raw.df[ tick.df[ 1, 7 ], 3 ] == tick.wanted )){
        # 1st have to check outlier scenario in which it's first tick of the current tick.df row
        tick.df[ tick.df[ 1, 8 ], 1 ] = raw.df[ tick.df[ 1, 7 ], 1 ]
        tick.df[ tick.df[ 1, 8 ], 2 ] = raw.df[ tick.df[ 1, 7 ], 2 ]
        tick.df[ tick.df[ 1, 8 ], 3 ] = raw.df[ tick.df[ 1, 7 ], 2 ]
        tick.df[ tick.df[ 1, 8 ], 4 ] = raw.df[ tick.df[ 1, 7 ], 2 ]
        tick.df[ tick.df[ 1, 8 ], 5 ] = raw.df[ tick.df[ 1, 7 ], 2 ]
        raw.df[ tick.df[ 1, 7 ], 4 ]= 2
        # Incrementing counts 
        tick.df[ 1, 6 ] = 0
        tick.df[ 1, 9 ] = 1 
        tick.df[ 1, 7 ] = tick.df[ 1, 7 ] + 1
        tick.df[ 1, 8 ] = tick.df[ 1, 8 ] + 1
      # Third new entry into tick.df & count + next value will be less than tick wanted
      }else if (( tick.df[ 1, 9 ] == 1 ) && ( tick.df[ 1, 6 ] + raw.df[ tick.df[ 1, 7 ], 3 ] > tick.wanted )){
        x = floor((( tick.df[ 1, 6 ] + raw.df[ tick.df[ 1, 7 ], 3 ]) - tick.wanted) / tick.wanted)
        y = ((( tick.df[ 1, 6 ] + raw.df[ tick.df[ 1, 7 ], 3 ]) - tick.wanted) / tick.wanted)-x
        for ( u in (tick.df[ 1, 7 ] : (tick.df[ 1,7 ] + (x-1)))){
          tick.df[ tick.df[ 1, 8 ], 1 ] = raw.df[ tick.df[ 1, 7 ], 1 ]
          tick.df[ tick.df[ 1, 8 ], 2 ] = raw.df[ tick.df[ 1, 7 ], 2 ]
          tick.df[ tick.df[ 1, 8 ], 3 ] = raw.df[ tick.df[ 1, 7 ], 2 ]
          tick.df[ tick.df[ 1, 8 ], 4 ] = raw.df[ tick.df[ 1, 7 ], 2 ]
          tick.df[ tick.df[ 1, 8 ], 5 ] = raw.df[ tick.df[ 1, 7 ], 2 ]
          tick.df[ 1, 8 ] = tick.df[ 1, 8 ] + 1
          tick.df[ 1, 9 ] = 1
        }
        if ( y != 0 ){
          tick.df[ tick.df[ 1, 8 ], 1 ] = raw.df[ tick.df[ 1, 7 ], 1 ]
          tick.df[ tick.df[ 1, 8 ], 2 ] = raw.df[ tick.df[ 1, 7 ], 2 ]
          tick.df[ tick.df[ 1, 8 ], 3 ] = raw.df[ tick.df[ 1, 7 ], 2 ]
          tick.df[ tick.df[ 1, 8 ], 4 ] = raw.df[ tick.df[ 1, 7 ], 2 ]
          tick.df[ 1, 9 ] = tick.df[ 1, 9 ] + 1
        }
        # Incrementing counts
        raw.df[ tick.df[ 1, 7 ], 4 ]= 8
        tick.df[ 1, 6 ] =  (tick.df[ 1, 6 ] + raw.df[ tick.df[ 1, 7 ], 3 ]) - ( (x+1) * tick.wanted )
        tick.df[ 1, 7 ] = tick.df[ 1, 7 ] + 1
        # Fourth the next entry will not be a new row & will have a value less than tick wanted
      }else if ( ( tick.df[ 1, 6 ] + raw.df[ tick.df[ 1, 7 ], 3 ] ) < tick.wanted && (( tick.df[ 1, 6 ] + sum ( raw.df[ tick.df[ 1, 7 ] : nrow( raw.df ), 3 ] )) > tick.wanted )){
        # Looping over High and Low to test if the current raw.df$Price is < or > than placeholder values
        if ( tick.df[ tick.df[ 1, 8 ], 3 ] <= raw.df[ tick.df[ 1, 7 ], 2 ] ){
          tick.df[ tick.df[ 1, 8 ], 3 ] = raw.df[ tick.df[ 1, 7 ], 2 ]
        } else if ( tick.df[ tick.df[ 1, 8 ], 4 ] >= raw.df[ tick.df[ 1, 7 ], 2 ] ){
          tick.df[ tick.df[ 1, 8 ], 4 ] = raw.df[ tick.df[ 1, 7 ], 2 ]
        } 
        raw.df[ tick.df[ 1, 7 ], 4 ]= 4
        # Incrementing counts
        tick.df[ 1, 6 ] = ( tick.df[ 1, 6 ] + raw.df[ tick.df[ 1, 7 ], 3 ] )
        tick.df[ 1, 9 ] = tick.df[ 1, 9 ] + 1
        tick.df[ 1, 7 ] = tick.df[ 1, 7 ] + 1
        # Fifth is not a new row & will have a value exactly equal to the tick wanted
      }else if(( tick.df[ 1, 6 ] + raw.df[ tick.df[ 1, 7 ], 3 ] ) == tick.wanted ){
        # Looping over High and Low to test if the current raw.df$Price is < or > than placeholder values
        if ( tick.df[ tick.df[ 1, 8 ], 3 ] <= raw.df[ tick.df[ 1, 7 ], 2 ]){
          tick.df[ tick.df[ 1, 8 ], 3 ] = raw.df[ tick.df[ 1, 7 ], 2 ]
        }else if( tick.df[ tick.df[ 1, 8 ], 4 ] >= raw.df[ tick.df[ 1, 7 ], 2 ] ){
          tick.df[ tick.df[ 1, 8 ], 4 ] = raw.df[ tick.df[ 1, 7 ], 2 ]
        } 
        raw.df[ tick.df[ 1, 7 ], 4 ]= 5
        # Incrementing counts
        tick.df[ tick.df[ 1, 8 ], 5 ] = raw.df[ tick.df[ 1, 7 ], 2 ]
        tick.df[ 1, 6 ] = 0
        tick.df[ 1, 7 ] = tick.df[ 1, 7 ] + 1
        tick.df[ 1, 8 ] = tick.df[ 1, 8 ] + 1
        tick.df[ 1, 9 ] = 1
        # Sixth is checking to see if next value will be larger than tick wanted & if the remainder is less than tick wanted
      }else if(( tick.df[ 1, 6 ] + raw.df[ tick.df[ 1, 7 ], 3 ] ) > tick.wanted && (( tick.df[ 1, 6 ] + raw.df[ tick.df[ 1, 7 ], 3 ]) - tick.wanted) < tick.wanted ) {
        # Looping over High and Low to test if the current raw.df$Price is < or > than placeholder values
        if ( tick.df[ tick.df[ 1, 8 ], 3 ] <= raw.df[ tick.df[ 1, 7 ], 2 ]){
          tick.df[ tick.df[ 1, 8 ], 3 ] = raw.df[ tick.df[ 1, 7 ], 2 ]
        }else if( tick.df[ tick.df[ 1, 8 ], 4 ] >= raw.df[ tick.df[ 1, 7 ], 2 ] ){
          tick.df[ tick.df[ 1, 8 ], 4 ] = raw.df[ tick.df[ 1, 7 ], 2 ]
        } 
        # Incrementing counts
        tick.df[ tick.df[ 1, 8 ], 5 ] = raw.df[ tick.df[ 1, 7 ], 2 ]
        tick.df[ 1, 6 ] = (( tick.df[ 1, 6 ] + raw.df[ tick.df[ 1, 7 ], 3 ]) - tick.wanted)
        tick.df[ 1, 8 ] = tick.df[ 1, 8 ] + 1
        tick.df[ 1, 9 ] = tick.df[ 1, 9 ] + 1
        tick.df[ tick.df[ 1, 8 ], 1 ] = raw.df[ tick.df[ 1, 7 ], 1 ]
        tick.df[ tick.df[ 1, 8 ], 2 ] = raw.df[ tick.df[ 1, 7 ], 2 ]
        tick.df[ tick.df[ 1, 8 ], 3 ] = raw.df[ tick.df[ 1, 7 ], 2 ]
        tick.df[ tick.df[ 1, 8 ], 4 ] = raw.df[ tick.df[ 1, 7 ], 2 ]
        raw.df[ tick.df[ 1, 7 ], 4 ]= 6
        tick.df[ 1, 7 ] = tick.df[ 1, 7 ] + 1
        # Seventh is checking to see if next value will be larger than tick wanted & if the remainder is equal to tick wanted
      }else if (( tick.df[ 1, 6 ] + raw.df[ tick.df[ 1, 7 ], 3 ] ) > tick.wanted && (( tick.df[ 1, 6 ] + raw.df[ tick.df[ 1, 7 ], 3 ]) - tick.wanted) == tick.wanted ){
        if ( tick.df[ tick.df[ 1, 8 ], 3 ] <= raw.df[ tick.df[ 1, 7 ], 2 ]){
          tick.df[ tick.df[ 1, 8 ], 3 ] = raw.df[ tick.df[ 1, 7 ], 2 ]
        }else if( tick.df[ tick.df[ 1, 8 ], 4 ] >= raw.df[ tick.df[ 1, 7 ], 2 ] ){
          tick.df[ tick.df[ 1, 8 ], 4 ] = raw.df[ tick.df[ 1, 7 ], 2 ]
        } 
        # Incrementing counts
        tick.df[ tick.df[ 1, 8 ], 5 ] = raw.df[ tick.df[ 1, 7 ], 2 ]
        tick.df[ 1, 6 ] = 0
        tick.df[ 1, 8 ] = tick.df[ 1, 8 ] + 1
        tick.df[ 1, 9 ] = 1
        tick.df[ tick.df[ 1, 8 ], 1 ] = raw.df[ tick.df[ 1, 7 ], 1 ]
        tick.df[ tick.df[ 1, 8 ], 2 ] = raw.df[ tick.df[ 1, 7 ], 2 ]
        tick.df[ tick.df[ 1, 8 ], 3 ] = raw.df[ tick.df[ 1, 7 ], 2 ]
        tick.df[ tick.df[ 1, 8 ], 4 ] = raw.df[ tick.df[ 1, 7 ], 2 ]
        tick.df[ tick.df[ 1, 8 ], 5 ] = raw.df[ tick.df[ 1, 7 ], 2 ]
        raw.df[ tick.df[ 1, 7 ], 4 ]= 7
        tick.df[ 1, 7 ] = tick.df[ 1, 7 ] + 1
        tick.df[ 1, 8 ] = tick.df[ 1, 8 ] + 1
        # Eighth is checking to see if next value will be larger than tick wanted & if the remainder is greater than tick wanted
      }else if (( tick.df[ 1, 6 ] + raw.df[ tick.df[ 1, 7 ], 3 ] ) > tick.wanted && (( tick.df[ 1, 6 ] + raw.df[ tick.df[ 1, 7 ], 3 ]) - tick.wanted) > tick.wanted ){
        # Looping over High and Low to test if the current raw.df$Price is < or > than placeholder values
        if ( tick.df[ tick.df[ 1, 8 ], 3 ] <= raw.df[ tick.df[ 1, 7 ], 2 ]){
          tick.df[ tick.df[ 1, 8 ], 3 ] = raw.df[ tick.df[ 1, 7 ], 2 ]
        }else if( tick.df[ tick.df[ 1, 8 ], 4 ] >= raw.df[ tick.df[ 1, 7 ], 2 ] ){
          tick.df[ tick.df[ 1, 8 ], 4 ] = raw.df[ tick.df[ 1, 7 ], 2 ]
        }
      }
      return (tick.df)
      }
